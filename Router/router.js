import Route from "./route.js"; // Importation de la classe Route
import { allRoutes, websiteName } from "./allRoutes.js"; // Importation des routes et du nom du site

// Cr√©ation d'une route pour la page 404 (page introuvable)
const route404 = new Route("404", "Page introuvable", "/pages/404.html", []);

// Fonction pour r√©cup√©rer la route correspondant √† une URL donn√©e
const getRouteByUrl = (url) => {
  // R√©cup√©ration de l'URL actuelle
  let currentRoute = null; // Initialisation de la route actuelle √† null

  // Parcours de toutes les routes pour trouver la correspondance
  allRoutes.forEach((element) => {
    // Parcours de toutes les routes
    if (element.url == url) {
      // V√©rification si l'URL correspond √† la route
      currentRoute = element; // Si oui, on l'assigne √† la route actuelle
    }
  });
  // Si aucune correspondance n'est trouv√©e, on retourne la route 404
  if (currentRoute != null) {
    return currentRoute;
  } else {
    return route404;
  }
};

// Fonction pour charger le contenu de la page

const LoadContentPage = async () => {
  // R√©cup√©ration de l'URL actuelle
  const path = window.location.pathname; // R√©cup√©ration du chemin de l'URL
  const actualRoute = getRouteByUrl(path); // R√©cup√©ration de la route correspondante

  // V√©rification des autorisations d'acc√®s √† la page
  const allRolesArrays = actualRoute.authorize; // R√©cup√©ration des r√¥les autoris√©s

  if (allRolesArrays.length > 0) {
    // V√©rification des autorisations
    if (allRolesArrays.includes("disconnected")) {
      // V√©rification si l'utilisateur est d√©connect√©
      if (isConnected()) {
        // Si l'utilisateur est connect√©, redirection vers la page d'accueil
        if (typeof window.navigateTo === "function") {
          window.navigateTo("/");
        } else {
          window.location.replace("/");
        }
        return; // Arr√™ter l'ex√©cution
      }
    } else {
      const roleUser = getRole(); // R√©cup√©ration du r√¥le de l'utilisateur
      if (!allRolesArrays.includes(roleUser)) {
        // V√©rification si le r√¥le de l'utilisateur est autoris√©

        // Si l'utilisateur n'est pas connect√© et essaie d'acc√©der √† une page de r√©servation,
        // le rediriger vers la page de connexion avec un param√®tre
        if (!isConnected() && (path === "/reserver" || path === "/allResa")) {
          // Stocker temporairement l'information de redirection
          sessionStorage.setItem("redirectFromReservation", "true");
          sessionStorage.setItem("redirectAfterLogin", path);
          if (typeof window.navigateTo === "function") {
            window.navigateTo("/signin");
          } else {
            window.location.replace("/signin");
          }
        } else {
          // Sinon, redirection vers la page d'accueil
          if (typeof window.navigateTo === "function") {
            window.navigateTo("/");
          } else {
            window.location.replace("/");
          }
        }
        return; // Arr√™ter l'ex√©cution
      }
    }
  }

  // R√©cup√©ration du contenu HTML de la route
  const html = await fetch(actualRoute.pathHtml).then((data) => data.text()); // R√©cup√©ration du contenu HTML

  // Ajout du contenu HTML √† l'√©l√©ment avec l'ID "main-page"
  document.getElementById("main-page").innerHTML = html; // Ajout du contenu HTML √† l'√©l√©ment avec l'ID "main-page"

  // Supprimer les anciens scripts de page pour √©viter les conflits
  const existingPageScripts = document.querySelectorAll(
    "script[data-page-script]"
  );
  existingPageScripts.forEach((script) => script.remove());

  // Ajout du contenu JavaScript
  if (actualRoute.pathJS != "") {
    // V√©rification si un fichier JavaScript est sp√©cifi√©
    // Cr√©ation d'une balise script
    const scriptTag = document.createElement("script"); // Cr√©ation d'une balise script
    scriptTag.setAttribute("type", "text/javascript"); // D√©finition du type de la balise script
    scriptTag.setAttribute("src", actualRoute.pathJS); // D√©finition de la source du script
    scriptTag.setAttribute("data-page-script", "true"); // Marqueur pour identifier les scripts de page

    // Ajouter un √©v√©nement de chargement pour initialiser la page si n√©cessaire
    scriptTag.onload = function () {
      // Appeler l'initialisation sp√©cifique pour la page account
      if (
        actualRoute.pathJS.includes("account.js") &&
        typeof window.initializeAccountPage === "function"
      ) {
        console.log("üîÑ Appel de l'initialisation account depuis le router");
        setTimeout(window.initializeAccountPage, 100);
      }

      // Appeler l'initialisation sp√©cifique pour la page des r√©servations
      if (
        actualRoute.pathJS.includes("reservations-manager.js") &&
        typeof window.initializeReservationsPage === "function"
      ) {
        console.log(
          "üîÑ Appel de l'initialisation r√©servations depuis le router"
        );
        setTimeout(window.initializeReservationsPage, 100);
      }
    };

    // Ajout de la balise script au corps du document
    document.querySelector("body").appendChild(scriptTag); // Ajout de la balise script au corps du document
  }

  // Changement du titre de la page
  document.title = actualRoute.title + " - " + websiteName; // Mise √† jour du titre de la page avec le nom du site
  // Afficher ou masquer les √©l√©ments en fonction du r√¥le
  showAndHideElementsForRoles(); // Fonction pour afficher ou masquer les √©l√©ments en fonction du r√¥le de l'utilisateur
  // R√©initialiser le bouton de d√©connexion
  if (typeof initSignoutButton === "function") {
    initSignoutButton();
  }
};

// Fonction pour g√©rer les √©v√©nements de routage (clic sur les liens)
const routeEvent = (event) => {
  event = event || window.event;
  event.preventDefault();
  // Mise √† jour de l'URL dans l'historique du navigateur
  window.history.pushState({}, "", event.target.href);
  // Chargement du contenu de la nouvelle page
  LoadContentPage();
};
// Fonction pour naviguer programmatiquement vers une route
const navigateTo = (url) => {
  // Mise √† jour de l'URL dans l'historique du navigateur
  window.history.pushState({}, "", url);
  // Chargement du contenu de la nouvelle page
  LoadContentPage();
};

// Gestion de l'√©v√©nement de retour en arri√®re dans l'historique du navigateur
window.onpopstate = LoadContentPage;
// Assignation de la fonction routeEvent √† la propri√©t√© route de la fen√™tre
window.route = routeEvent;
// Assignation de la fonction navigateTo √† la propri√©t√© navigateTo de la fen√™tre
window.navigateTo = navigateTo;
// Chargement du contenu de la page au chargement initial
LoadContentPage();
